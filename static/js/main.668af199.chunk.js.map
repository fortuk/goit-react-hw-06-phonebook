{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Section/Section.jsx","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","v4","deleteContact","changeFilter","connect","contacts","items","dispatch","onSubmit","contact","contactsActions","useState","setName","setNumber","handleChange","event","currentTarget","value","reset","preventDefault","options","find","toLowerCase","alert","className","s","form","label","input","onChange","type","pattern","title","required","button","getVisibleContacts","allContats","filter","normalizedFilter","includes","onDeleteContact","list","map","item","onClick","state","inputValue","target","Section","children","styles","section","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","actions","action","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devtools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.668af199.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3lkj9\",\"item\":\"ContactList_item__ut4zh\",\"button\":\"ContactList_button__3lyjy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__KNbcC\",\"label\":\"Filter_label__OgY9D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3ZCod\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n    payload: {\n        id: v4(),\n        name,\n        number,\n    },\n}));\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, changeFilter };\n\n// v1\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: v4(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });","import { useState } from \"react\";\nimport s from './ContactForm.module.css'\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from \"prop-types\";\n\n\n\nfunction ContactForm({ onSubmit, contacts }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = event => {\n        const { name, value } = event.currentTarget;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n\n            case 'number':\n                setNumber(value);\n                break;\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        const options = { name, number };\n\n        if (\n            contacts.find(\n                contact => name.toLowerCase() === contact.name.toLowerCase(),\n            )\n        ) {\n            alert(`${name} is already in contacts`);\n        } else {\n            onSubmit(options);\n        }\n\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n\n\n    return (\n\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}> Name\n                <input className={s.input}\n                    onChange={handleChange}\n                    value={name}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                />\n            </label>\n            <label className={s.label}> Number\n                <input className={s.input}\n                    onChange={handleChange}\n                    value={number}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                />\n            </label>\n            <button type=\"Submit\" className={s.button}>Add</button>\n\n        </form>\n    )\n}\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    contacts: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = ({ contacts: { items } }) => ({\n    contacts: items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: contact => dispatch(contactsActions.addContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import PropTypes from 'prop-types'\nimport s from './ContactList.module.css'\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n    return (\n        <ul className={s.list}>\n            {contacts.map(({ id, name, number }) => (\n                <li key={id} className={s.item}>\n                    {name}: {number}\n                    <button onClick={() => onDeleteContact(id)} type=\"button\" className={s.button}>DELETE</button>\n\n                </li>\n\n            ))}\n        </ul>\n    );\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }),\n    ).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\nconst getVisibleContacts = (allContats, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return allContats.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedFilter),\n    );\n};\n\nconst mapStateToProps = ({ contacts: { filter, items } }) => ({\n    contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n","import s from './Filter.module.css'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nconst Filter = ({ inputValue, onChange }) => (\n    <label className={s.label}>\n        <input type=\"text\" value={inputValue} onChange={onChange} className={s.input} />\n    </label>\n)\nFilter.propTypes = {\n    inputValue: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\nconst mapStateToProps = state => ({\n    inputValue: state.contacts.filter,\n});\nconst mapDispatchToProps = dispatch => ({\n    onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import PropTypes from 'prop-types'\nimport styles from './Section.module.css'\nconst Section = ({children}) => (\n    <section className={styles.section}> {children}\n    </section>\n)\nSection.propTypes = {children: PropTypes.node,\n};\nexport default Section","\n\nimport './App.css';\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport Filter from './components/Filter'\nimport Section from './components/Section';\n\n\nfunction App() {\n    return (\n        <Section>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </Section>\n    );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst items = createReducer([], {\n    [actions.addContact]: (state, action) => [...state, action.payload],\n    [actions.deleteContact]: (state, action) => [\n        ...state.filter(({ id }) => id !== action.payload),\n    ],\n});\n\nconst filter = createReducer('', {\n    [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n    items,\n    filter,\n});\n\n// v1\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n//     case types.DELETE:\n//       return [...state.filter(({ id }) => id !== payload)];\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case 'contacts/changeFilter':\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };","import logger from 'redux-logger';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n    ...getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n    }),\n    logger,\n];\n\nconst contactsPersistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n};\n// v3\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\n    },\n    middleware,\n    devtools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n\n// v1\n// const initialState = {};\n// // Функция, принимает предидущее состояние (state), действие (action)\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     // case 'name':\n\n//     default:\n//       return state;\n//   }\n\n//   // возвращает новое состояние\n//   return state;\n// };\n\n// v2\n// store - хранилище\n// const store = createStore(rootReducer, composeWithDevTools());","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store.store}>\n            <PersistGate loading={null} persistor={store.persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2HCA-\",\"label\":\"ContactForm_label__3m9Xl\",\"input\":\"ContactForm_input__269Co\",\"button\":\"ContactForm_button__1meqR\"};"],"sourceRoot":""}